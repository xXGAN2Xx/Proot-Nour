name: Build and upload server.jar

# Trigger when anything inside the `wrappers/` folder changes (push or PR)
on:
  push:
    paths:
      - 'wrappers/**'
  pull_request:
    paths:
      - 'wrappers/**'
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  build:
    name: Compile Kotlin and upload server.jar
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK (required for Kotlin)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Ensure Kotlin compiler is available
        id: install_kotlin
        run: |
          set -e
          if command -v kotlinc >/dev/null 2>&1; then
            echo "kotlinc present"
            echo "installed=true" >> $GITHUB_OUTPUT
          else
            echo "Installing SDKMAN and Kotlin..."
            # install sdkman non-interactively and install kotlin
            curl -sS https://get.sdkman.io | bash
            source "$HOME/.sdkman/bin/sdkman-init.sh"
            sdk install kotlin
            echo "installed=true" >> $GITHUB_OUTPUT
          fi

      - name: Compile Kotlin files from wrappers/ into server.jar
        run: |
          set -e
          mkdir -p build
          # collect .kt files under wrappers
          KT_FILES=$(find wrappers -type f -name "*.kt" -print | tr '\n' ' ')
          if [ -z "$KT_FILES" ]; then
            echo "No Kotlin files found in wrappers/ -- nothing to build."
            exit 1
          fi

          echo "Compiling: $KT_FILES"
          # try to compile into an executable JAR that includes the runtime
          kotlinc $KT_FILES -include-runtime -d build/server.jar

          # fallback: if compile produced a different jar, try to find and rename it
          if [ ! -f build/server.jar ]; then
            JAR_FOUND=$(find . -maxdepth 3 -type f -name "*.jar" | head -n1 || true)
            if [ -n "$JAR_FOUND" ]; then
              echo "Found jar: $JAR_FOUND â€” moving to build/server.jar"
              mv "$JAR_FOUND" build/server.jar
            else
              echo "Failed to produce server.jar"
              exit 1
            fi
          fi

          ls -lh build/server.jar

      - name: Upload server.jar as artifact
        uses: actions/upload-artifact@v4
        with:
          name: server-jar
          path: build/server.jar
          retention-days: 7

      - name: Show upload link (note)
        run: |
          echo "Artifact 'server-jar' uploaded. Download it from the workflow run's Artifacts section."
